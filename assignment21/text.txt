Q1 Which of the following(s) is/are true about bubble sort:
It is stable sort
It has a worst case space complexity of O(n)
It involves swapping of adjacent elements
After each iteration, the greatest element is placed at the end of the array.
-->1,3,4

Q2 What will the following array look like after one iteration of bubble sort [1,6,2,5,4,3].
[1,3,2,4,5,6]
[1,2,3,4,5,6]
[1,2,5,4,3,6]
[1,2,4,5,3,6]
-->
[1,2,5,4,3,6]

Q3 In which case does bubble sort works in the most efficient way:
When the array is sorted in increasing order
When the array is sorted partially
When the array is sorted in decreasing order.
When the array is nearly sorted.
-->
When the array is sorted in increasing order

Q4 Sort the array in descending order using Bubble Sort.
-->
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
int main(){
    vector<int>v={1,0,2,0,4,2,5,4,0,43,26,7};
   int n=v.size();
   for(int i=0;i<n-1;i++){///passes;
        for(int j=0;j<n-1-i;j++){
       if(v[j]<v[j+1]){
        swap(v[j],v[j+1]);
       }
        }
    }
   for(int i=0;i<v.size();i++){
    cout<<v[i]<<" ";
   }

   }

Q5 Check if the given array is almost sorted. (elements are at-most one position away)
-->
#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
int main(){
    bool flag=true;
    int arr[5]={1,2,2,3,4};
    for(int i=0;i<5-1;i++){
        if(arr[i]>arr[i+1]){
            flag=false;
        }
    }
    if(flag)cout<<"Sorted";
    else cout<<"Unsorted";
   }