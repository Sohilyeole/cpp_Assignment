Q1 Write a program to apply binary search in array sorted in decreasing order.
-->#include<iostream>
#include<vector>
using namespace std;
int main(){
    vector<int>v={33,23,19,15,12,9,5,2,1};
    int target=23;
    int low=0;
    int high=v.size()-1;
    while(low<=high){
        int mid=(low+high)/2;
        if(v[mid]==target){
            cout<<mid;
            break;

        }
        else if(v[mid]>target)low=mid+1;
        else high=mid-1;
    }

}

Q2 You have a sorted array of infinite numbers, how would you search an element in the array?
--> solve by double serach sapce concept;


Q3 You are given an m x n integer matrix matrix with the following two properties:
Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target , return true if target is in matrix or false otherwise.
You must write a solution in O(log(m * n)) time complexity.
Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Example 2:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
-->#include<iostream>
#include<vector>
using namespace std;
int main(){
    vector<vector<int>>v={{1,3,5,7},{10,11,16,20},{23,30,34,60}};
    int target = 3;
    bool flag=false;
    int row=v.size(); //3
     int col=v[0].size();//4
     int low=0;
     int high=row-1;
     while(low<=high){
        int mid=(low+high)/2;
        if(v[mid][0]<=target&& v[mid][col-1]>=target){
          int l=0;int h=col-1;
          while(l<=h){
            int m=(l+h)/2;
            if(v[mid][m]==target){
                flag=true;
                break;
            }
            else if(v[mid][m]<target)l=m+1;
            else h=m-1;
          }
            break;
        }
        else if(v[mid][0]<target){
             low=mid+1;
        }
        else high=mid-1;
     }
    
     if(flag==false){
        cout<<"false";
     }
     else cout<<"true";
  
}
Q4 There is an integer array nums sorted in non-decreasing order (not necessarily with
distinct values).
Before being passed to your function, nums is rotated at an unknown pivot index k ( 0 <= k
< nums.length ) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1],
nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example,
[0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become
[4,5,6,6,7,0,1,2,4,4] .
Given the array nums after the rotation and an integer target , return true if target is in
nums , or false if it is not in nums .
You must decrease the overall operation steps as much as possible.
Example 1:
Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true
Example 2:
Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false

-->
bool search(vector<int>& nums, int target) {
         int low = 0, high = nums.size() - 1;

        while (low <= high) {
            int mid = (low + high) / 2;

            if (nums[mid] == target) {
                return true;
            }
            else if(nums[low]==nums[mid] && nums[mid]==nums[high]){
                low=low+1;
                high=high-1;
            }

            else if (nums[low] <= nums[mid]) {
                if (nums[low] <= target && target < nums[mid]) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            } else {
                if (nums[mid] < target && target <= nums[high]) {
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            }
        }
        return false;
    }
