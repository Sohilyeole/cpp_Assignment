Q1 Given a sorted array of n elements and a target ‘x’. Find the last occurrence of ‘x’ in the array. If ‘x’
does not exist return -1.
Input 1: arr[] = {1,2,3,3,4,4,4,5} , x = 4
Output 1: 6
-->
#include<iostream>
using namespace std;
int main(){
    int n=8;
   int  arr[n] = {1,2,3,3,4,4,4,5};
   int x = 4;
   bool flag=false;
   int low=0;
   int high=n-1;
   while(low<=high){
    int mid=(low+high)/2;
    if(arr[mid]==x){
      if(arr[mid+1]==x){
        low=mid+1;
      }
      else {
        cout<<mid;
        flag=true;
        break;

      }
    }
    else if(arr[mid]<x)low=mid+1;
    else high=mid-1;
   }
   if(flag==false){
    cout<<-1;
   }
    
}

Q2 Given a sorted binary array, efficiently count the total number of 1’s in it.
Input 1 : a = [0,0,0,0,1,1]
Output 1: 2
-->
#include <iostream>
using namespace std;
int main()
{
    int n = 6;
    int arr[n] = {0, 0, 0, 0, 1, 1};
    int x = 1;
    int lastoccurance;
    int firstoccurance;

    int low = 0;
    int high = n - 1;

    while (low <= high)
    {
        int mid = (low + high) / 2;
        if (arr[mid] == x)
        {
            if (arr[mid + 1] == x)
            {
                low = mid + 1;
            }
            else
            {
                lastoccurance = mid;
                break;
            }
        }
        else if (arr[mid] < x)
            low = mid + 1;
        else
            high = mid - 1;
    }

    low = 0;
    high = n - 1;
    while (low <= high)
    {
        int mid = (low + high) / 2;
        if (arr[mid] == x)
        {
            if (arr[mid - 1] == x)
            {
                high = mid - 1;
            }
            else
            {
                firstoccurance = mid;
                break;
            }
        }
        else if (arr[mid] < x)
            low = mid + 1;
        else
            high = mid - 1;
    }
    cout << lastoccurance - firstoccurance + 1;
}

Q3 Given a matrix having 0-1 only where each row is sorted in increasing order, find the row with the
maximum number of 1’s.
Input matrix : 
0 1 1 1
0 0 1 1
1 1 1 1 
0 0 0 0
Output: 2
-->
#include <iostream>
using namespace std;
int main()
{  
    int arr[4][4]={{0,1,1,1},{0,0,1,1},{1,1,1,1},{0,0,0,0}};

int mxcount=0;
int mxcountrow=0;
   for(int i=0;i<4;i++){
 
    int low=0;
    int high=3;
    int occurance=0;
    while(low<=high){
        int mid=(low+high)/2;
        if(arr[i][mid]==1){
          
           if(arr[i][mid-1]==1){
                high=mid-1;
            }
            else {
                occurance=mid;
                break;
            }
        }
        else if(arr[i][mid]<1){
            low=mid+1;

        }
        else high=mid-1;
    }
   
    int count=4-occurance;
    if(count>mxcount){mxcount=count;
        mxcountrow=i;
    }

   }
   cout<<mxcountrow;
   
}



Q4 Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n]
inclusive in sorted order.
There is only one repeated number in nums, return this repeated number.
Input 1: arr[] = {1,2,3,3,4}
Output 1: 3
Input 2: arr[] = {1,2,2,3,4,5}
Output 2: 2
-->
#include <iostream>
using namespace std;
int main()
{
    int n = 5;
    int arr[n] = {1, 2, 3, 3, 4};
    int low=1;
    int high=4;
    while(low<=high){
        int mid=(low+high)/2;
        if(arr[mid]!=mid){
            cout<<arr[mid];
            break;
        }
        else if(arr[mid]<mid)low=mid+1;
        else high=mid-1;
        
            }
}

Q5 Given a number ‘n’. Predict whether ‘n’ is a valid perfect square or not.
-->
#include <iostream>
using namespace std;
int main()
{  cout<<"Enter the number : "<<endl;
   int n;
   bool isperfectsquare=false;
   cin>>n;
   int low=0;
   int high=n;
   while(low<=high){
    int mid=(low+high)/2;
    if(mid*mid==n){
        isperfectsquare=true;
        
        break;
    }
    else if(mid*mid<n)low=mid+1;
    else high=mid-1;
   }
   if(isperfectsquare)cout<<"YES";
   else cout<<"NO";
}

Q6 You have n coins and you want to build a staircase with these coins. The staircase consists of k
rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.
Given the integer n, return the number of complete rows of the staircase you will build.
Example 1:
Input: n = 5
Output: 2
Explanation: Because the 3rd row is incomplete, we return 2.
Example 2:
Input: n = 8
Output: 3
Explanation: Because the 4th row is incomplete, we return 3.
-->
#include <iostream>
using namespace std;
int main()
{  cout<<"Enter the number : "<<endl;
   int n;
 
   cin>>n;
   int low=0;
   int high=n;
   int res;
   while(low<=high){
    int mid=(low+high)/2;
    if((mid*(mid+1)/2)<n){low=mid+1; res=mid;}
    else high=mid-1;
   }
   cout<<res;
   
}
